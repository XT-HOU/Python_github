--docker command --help 更深入的了解指定的 Docker 命令使用方法。例：docker stats --help
--docker run
    在容器内运行一个应用程序，例：docker run ubuntu:15.10 /bin/echo "Hello world"
    docker: Docker 的二进制执行文件；
    run: 与前面的 docker 组合来运行一个容器。
    ubuntu:15.10 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库?Docker Hub?下载公共镜像。
    /bin/echo "Hello world": 在启动的容器里执行的命令

--docker run -i -t -d
    让 docker 运行的容器实现"对话"的能力。例：docker run -i -t ubuntu:15.10 /bin/bash
    -t: 在新容器内指定一个伪终端或终端。
    -i: 允许你对容器内的标准输入 (STDIN) 进行交互。
    -d: 后台启动

--docker attach <容器 ID>
    进入容器，例：docker attach 1e560fca3906

--docker exec <容器 ID>
    退出容器，例：docker exec -it 243c32535da7 /bin/bash

-- docker run -d -P training/webapp python app.py
    网络端口映射。
    docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py
    -P :是容器内部端口随机映射到主机的端口。
    -p : 是容器内部端口绑定到指定的主机端口。

-- docker  --name
    容器命名。docker run -d -P --name runoob training/webapp python app.py

--docker ps
    列出在运行的容器。
    CONTAINER ID: 容器 ID。
    IMAGE: 使用的镜像。
    COMMAND: 启动容器时运行的命令。
    CREATED: 容器的创建时间。
    STATUS: 容器状态。状态有7种：created（已创建）、restarting（重启中、）running 或 Up（运行中）、removing（迁移中）、paused（暂停）
        exited（停止）、dead（死亡）
    PORTS: 容器的端口信息和使用的连接类型（tcp\udp）。
    NAMES: 自动分配的容器名称。

--docker <stop/start/restart> <容器 ID> ,停止容器

-- docker export、 docker import
    导出容器快照到本地文件：docker export 1e560fca3906 > ubuntu.tar
    导入容器快照：cat docker/ubuntu.tar | docker import - test/ubuntu:v1

-- docker port?
    使用?docker port?可以查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号