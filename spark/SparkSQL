什么是Spark SQL
    Spark SQL是Spark用于结构化数据(structured data)处理的Spark模块。

Spark SQL的特点
    1.将Spark SQL转换成RDD，然后提交到集群执行，执行效率非常快。
    2.统一的数据访问方式，使用相同的方式连接不同的数据源。
    3.兼容Hive在已有的仓库上直接运行 SQL 或者 HiveQL。
    4.标准的数据连接，通过 JDBC 或者 ODBC 来连接

Spark SQL它提供了2个编程抽象，类似Spark Core中的RDD，DataFrame和DataSet。
什么是DataFrame
    DataFrame是一种以RDD为基础的分布式数据集，类似于传统数据库中的二维表格，可以把它当做数据库中的一张表来对待。
    DataFrame也是懒执行的，但性能上比RDD要高，主要原因：优化的执行计划，即查询计划通过Spark catalyst optimiser进行优化
    DataFrame与RDD的主要区别在于，前者带有schema元信息，即DataFrame所表示的二维表数据集的每一列都带有名称和类型。
这使得Spark SQL得以洞察更多的结构信息，从而对藏于DataFrame背后的数据源以及作用于DataFrame之上的变换进行了针对性的优化，最终达到大幅提升运行时效率的目标。
反观RDD，由于无从得知所存数据元素的具体内部结构，Spark Core只能在stage层面进行简单、通用的流水线优化。
同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从 API 易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API 要更加友好，门槛更低。
什么是DataSet
    DataSet是分布式数据集合。DataSet是Spark 1.6中添加的一个新抽象，是DataFrame的一个扩展。

三者的共性
    1)	RDD、DataFrame、DataSet全都是spark平台下的分布式弹性数据集，为处理超大型数据提供便利;
    2)	三者都有惰性机制，在进行创建、转换，如map方法时，不会立即执行，只有在遇到Action如foreach时，三者才会开始遍历运算;
    3)	三者有许多共同的函数，如filter，排序等;
    4)	在对DataFrame和Dataset进行操作许多操作都需要这个包:import spark.implicits._（在创建好SparkSession对象后尽量直接导入）
    5)	三者都会根据 Spark 的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出
    6)	三者都有partition的概念
    7)	DataFrame和Dataset均可使用模式匹配获取各个字段的值和类型

三者的区别
    RDD
        1.RDD一般和Spark MLib同时使用
        2.RDD不支SparkSQL操作
    DataFrame
        1.与RDD和Dataset不同，DataFrame每一行的类型固定为Row，每一列的值没法直接访问，只有通过解析才能获取各个字段的值
        2.DataFrame与DataSet一般不与 Spark MLib 同时使用
        3.DataFrame与DataSet均支持 SparkSQL 的操作，比如select，groupby之类，还能注册临时表/视窗，进行 sql 语句操作
        4.DataFrame与DataSet支持一些特别方便的保存方式，比如保存成csv，可以带上表头，这样每一列的字段名一目了然
    DataSet
        1.Dataset和DataFrame拥有完全相同的成员函数，区别只是每一行的数据类型不同。
        DataFrame其实就是DataSet的一个特例，type DataFrame = Dataset[Row]
        2.DataFrame也可以叫Dataset[Row],每一行的类型是Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，
        只能用上面提到的getAS方法或者共性中的第七条提到的模式匹配拿出特定字段。而Dataset中，每一行是什么类型是不一定的，
        在自定义了case class之后可以很自由的获得每一行的信息

用户自定义函数
    输入一行，返回一个结果。在Shell窗口中可以通过spark.udf功能用户可以自定义函数。
    输入多行,返回一行。通过继承UserDefinedAggregateFunction来实现用户自定义聚合函数。

SparkSQL数据的加载与保存
    spark.read.load 是加载数据的通用方法
	df.write.save 是保存数据的通用方法
